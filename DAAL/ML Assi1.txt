Assignment 1
#import os
#os.getcwd()
import pandas as pd
#Analysis on Structured Data using pandas

#import the datasets
df=pd.read_csv('Heart.csv')

#first five entry
df.head()

#number of rows and column
df.shape

#missing value
df.isnull()

#finding the missing (summary format) 
df.isnull().sum()

#output of not null values
df.count()

#finding datatypes
df.dtypes

#find out zeros(boolean filtering)
df==0

#especailly zeros are higlighted
#df[df==0].count()
df[df==0]

df.columns

#using label base slicing finding mean
df['Age'].mean()

#more than one column then include in 2d array[[]]
newdf=df[['Age','Sex','ChestPain','RestBP','Chol']]

newdf

 #cross_validation
from sklearn.model_selection import train_test_split

train,test=train_test_split(df,random_state=0,test_size=0.25)

train.shape

test.shape

#for implementation of array using numpy
import numpy as np

from sklearn.metrics import confusion_matrix, classification_report

y_act = [1]* 50+ [0] *450 
y_pred = [1] * 45+ [0] * 400 + [1] *55

print(confusion_matrix(y_act,y_pred))

print(classification_report (y_act, y_pred))

from sklearn.metrics import ConfusionMatrixDisplay

ConfusionMatrixDisplay.from_predictions(y_act,y_pred)

from sklearn.metrics import accuracy_score

accuracy_score(y_act,y_pred)
dir(object)
help(object)


Assignment 2

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('temperatures.csv')

df.head()

#input data
x=df['YEAR']
#output anuual average temperature
y=df['ANNUAL']

#plt.figure(figsize=(16,9))
plt.title('Temperature Plot of INDIA')
plt.xlabel('Year')
plt.ylabel('Annual Average Temperature')
plt.scatter(x,y)

#data inputting then rows and columns are required
x.shape

x=x.values

x=x.reshape(117,1)

#requirement of pythom libraary not of ml
x.shape

from sklearn.linear_model import LinearRegression

#regressor obeject created
regressor=LinearRegression()

#supervisedv ml
regressor.fit(x,y)

#slope(m)
regressor.coef_

#model parameter and hyper parameter(c)
regressor.intercept_

#prediction for temperature
regressor.predict([[2025]])

predicted =regressor.predict(x)

predicted

#mean absolute error
np.mean(abs(y-predicted))

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y,predicted)

#mean square error
np.mean(abs(y-predicted)**2)

from sklearn.metrics import mean_squared_error
mean_squared_error(y,predicted)

from sklearn.metrics import r2_score
r2_score(y,predicted)

regressor.score(x,y)

 #plt.figure(figsize=(16,9))
plt.title('Temperature Plot of INDIA')
plt.xlabel('Year')
plt.ylabel('Annual Average Temperature')
plt.scatter(x,y,label='actual ',color='r' ,marker='.')
plt.plot(x,predicted,label='predicted',color='g')
plt.legend()

sns.regplot(x='YEAR',y='ANNUAL' ,data=df)

Assignment 3

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('Admission_Predict.csv')

df.columns

df.shape

df.head()

#Data Preprocessing
from sklearn.preprocessing import Binarizer
bi=Binarizer(threshold=0.75)
df['Chance of Admit ']=bi.fit_transform(df[['Chance of Admit ']])

df.head()

#f=drop column Chance of Admit
x=df.drop('Chance of Admit ',axis=1)
y=df['Chance of Admit ']

x

#change datatype float to int 
y=y.astype('int')

y

#how many entries in y(how many admitted or not)
sns.countplot(x=y);

y.value_counts()

#cross-validation
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test= train_test_split(
    x,y,random_state=0,test_size=0.25)

x_train.shape

x_test.shape

x_train

 x_test

# import the class
from sklearn.tree import DecisionTreeClassifier

#all output is fixed
classifier=DecisionTreeClassifier(random_state=0)

#model is built
classifier.fit(x_train,y_train)

y_pred=classifier.predict(x_test)

y_pred

result=pd.DataFrame({
    'actual':y_test,
    'predicted':y_pred
})

#matching of actual and predicted values
result

# D. Evaluate Model.
from sklearn.metrics import ConfusionMatrixDisplay,accuracy_score
from sklearn.metrics import classification_report

ConfusionMatrixDisplay.from_predictions(y_test,y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))

new=[[136,314,109,4,3.5,4.0,8.77,1]]
classifier.predict(new)[0]

from sklearn.tree import plot_tree

plt.figure(figsize=(12,12))
plot_tree(classifier,fontsize=8,filled=True,rounded=True,
feature_names=x.columns,class_names=['NA','AD']);







