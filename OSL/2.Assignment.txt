#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void bubbleSort(int arr[], int size) {
    int i, j, temp;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int n, i;
    printf("Enter the number of integers to be sorted: ");
    scanf("%d", &n);
    if (n <= 0) {
        printf("Invalid input. Number of integers must be positive.\n");
        return 1;
    }
    
    int *arr = (int*)malloc(n * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }
    
    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    
    pid_t pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        free(arr);
        return 1;
    } else if (pid == 0) {
        printf("Child process (PID: %d): Sorting the integers using bubble sort.\n", getpid());
        bubbleSort(arr, n);
        printf("Child process (PID: %d): Sorted integers: ", getpid());
        for (i = 0; i < n; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
        free(arr);
    } else {
        printf("Parent process (PID: %d): Waiting for the child process to finish sorting.\n", getpid());
        wait(NULL);
        
        printf("Parent process (PID: %d): Child process (PID: %d) has finished sorting.\n", getpid(), pid);
    }
    
    if (pid != 0) {
        sleep(2);
        printf("Parent process (PID: %d) exits, creating an orphan child process.\n", getpid());
    }
    
    return 0;
}
