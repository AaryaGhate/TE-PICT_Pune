#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

struct Process {
    int pid; // Process ID
    int burst_time; // Burst Time
    int arrival_time; // Arrival Time
};

// Function to find the waiting time for all processes
void calculateWaitingTime(struct Process processes[], int n, int waiting_time[]) {
    int remaining_time[n];
    // Copy the burst time into remaining_time[]
    for (int i = 0; i < n; i++)
        remaining_time[i] = processes[i].burst_time;
    int completed = 0, current_time = 0, min_remaining_time = INT_MAX;
    int shortest_process = 0, finish_time;
    int found = 0;
    // Continue until all processes are completed
    while (completed != n) {
        // Find the process with the minimum remaining time
        for (int j = 0; j < n; j++) {
            if ((processes[j].arrival_time <= current_time) &&
                (remaining_time[j] < min_remaining_time) && remaining_time[j] > 0) {
                min_remaining_time = remaining_time[j];
                shortest_process = j;
                found = 1;
            }
        }
        if (found == 0) {
            current_time++;
            continue;
        }
        // Reduce the remaining time by one
        remaining_time[shortest_process]--;
        // Update the minimum remaining time
        min_remaining_time = remaining_time[shortest_process];
        if (min_remaining_time == 0)
            min_remaining_time = INT_MAX;
        // If a process is completed
        if (remaining_time[shortest_process] == 0) {
            // Increment the completed count
            completed++;
            found = 0;
            // Find the finish time of the current process
            finish_time = current_time + 1;
            // Calculate the waiting time
            waiting_time[shortest_process] = finish_time - processes[shortest_process].burst_time - processes[shortest_process].arrival_time;
            if (waiting_time[shortest_process] < 0)
                waiting_time[shortest_process] = 0;
        }
        // Increment the current time
        current_time++;
    }
}

// Function to calculate the turnaround time
void calculateTurnaroundTime(struct Process processes[], int n, int waiting_time[], int turnaround_time[]) {
    // Calculating turnaround time by adding burst_time and waiting_time
    for (int i = 0; i < n; i++)
        turnaround_time[i] = processes[i].burst_time + waiting_time[i];
}



// Function to calculate average times
void calculateAverageTime(struct Process processes[], int n) {
    int waiting_time[n], turnaround_time[n];
    float total_waiting_time = 0, total_turnaround_time = 0;
    // Calculate waiting time for all processes
    calculateWaitingTime(processes, n, waiting_time);
    // Calculate turnaround time for all processes
    calculateTurnaroundTime(processes, n, waiting_time, turnaround_time);
    // Display processes along with all details
    printf("P\tBT\tWT\tTAT\n");
    // Calculate total waiting time and total turnaround time
    float total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += waiting_time[i];
        total_tat += turnaround_time[i];
        printf("%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].burst_time, waiting_time[i], turnaround_time[i]);
    }
    // Calculate and display average waiting time and average turnaround time
    printf("\nAverage waiting time = %.2f\n", total_wt / n);
    printf("Average turnaround time = %.2f\n", total_tat / n);
 
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time and burst time for process %d: ", processes[i].pid);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
    }
    calculateAverageTime(processes, n);
    return 0;
}
