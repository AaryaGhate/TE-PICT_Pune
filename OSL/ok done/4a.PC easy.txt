#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <stdlib.h>

sem_t empty, full;
pthread_mutex_t mutex;
int buffer[5];
int count = 0;

void *producer(void *arg) {
    long int num = (long int)arg;

    // Producer is trying to produce data
    sem_wait(&empty);
    
    // Producer is allowed to produce data and waiting for his turn
    pthread_mutex_lock(&mutex);
    
    // Producer is producing data
    buffer[count] = rand() % 10;
    printf("\nProducer %ld Produced: %d\n", num + 1, buffer[count]);
    count++;
    sleep(1);
    
    pthread_mutex_unlock(&mutex); // Producer has released mutex lock
    sem_post(&full); // Producer has increased full slots by 1
    pthread_exit(NULL);
}

void *consumer(void *arg) {
    long int num = (long int)arg;

    // Consumer is trying to consume data
    sem_wait(&full);

    // Consumer is allowed to consume data and waiting for his turn
    pthread_mutex_lock(&mutex);

    // Consumer is consuming data
    count--;
    printf("\nConsumer %ld consumed: %d\n", num + 1, buffer[count]);
    sleep(1);

    pthread_mutex_unlock(&mutex); // Consumer has released mutex lock
    sem_post(&empty); // Consumer has increased empty slots by 1
    pthread_exit(NULL);
}

int main() {
    int np, nc; // number of producers and consumers
    pthread_t p[10], c[10]; // Thread variables
    unsigned long int i, j, k;

    // Read number of producers and number of consumers
    printf("Enter number of producers and number of consumers: ");
    scanf("%d %d", &np, &nc);

    // Initialize semaphore variables
    sem_init(&empty, 0, 5);
    sem_init(&full, 0, 0);

    // Declaration of mutex
    pthread_mutex_init(&mutex, NULL);

    // Create producer threads
    for (i = 0; i < np; i++)
        pthread_create(&p[i], NULL, producer, (void *)i);

    // Create consumer threads
    for (j = 0; j < nc; j++)
        pthread_create(&c[j], NULL, consumer, (void *)j);

    // Join producer threads
    for (k = 0; k < np; k++)
        pthread_join(p[k], NULL);

    // Join consumer threads
    for (i = 0; i < nc; i++)
        pthread_join(c[i], NULL);

    return 0;
}
